// post_detail_screen.dart
import 'package:clbdoanhnhansg/widgets/horizontal_divider.dart';
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:clbdoanhnhansg/utils/icons/app_icons.dart';
import 'package:clbdoanhnhansg/providers/auth_provider.dart';
import 'package:clbdoanhnhansg/providers/post_provider.dart';
import 'package:provider/provider.dart';
import 'package:clbdoanhnhansg/screens/comment/comments_screen.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:intl/intl.dart';

class ChiTietBaiDang extends StatefulWidget {
  final List<String> imageList;
  final int initialIndex;
  final String companyName;
  final int like;
  final int comment;
  final String dateTime;
  final String description;
  final String? postId; // Th√™m postId ƒë·ªÉ c√≥ th·ªÉ like v√† comment
  final String? title; // Th√™m title
  final bool isLiked; // Th√™m isLiked t·ª´ m√†n h√¨nh tr∆∞·ªõc
  final List<String> likes; // Th√™m danh s√°ch likes

  const ChiTietBaiDang({
    super.key,
    required this.imageList,
    required this.initialIndex,
    required this.companyName,
    required this.like,
    required this.comment,
    required this.dateTime,
    required this.description,
    this.postId, // Th√™m postId
    this.title,
    this.isLiked = false, // M·∫∑c ƒë·ªãnh l√† false
    this.likes = const [], // M·∫∑c ƒë·ªãnh l√† danh s√°ch r·ªóng
  });

  @override
  State<ChiTietBaiDang> createState() => _ChiTietBaiDanglScreenState();
}

class _ChiTietBaiDanglScreenState extends State<ChiTietBaiDang> {
  late PageController _pageController;
  late int _currentPage;
  final storage = const FlutterSecureStorage();
  late int likeCount;
  bool isLiked = false;
  String? idUserID;
  bool _hasChanges = false;
  bool _showFullDescription = false; // Th√™m bi·∫øn ƒë·ªÉ ki·ªÉm so√°t hi·ªÉn th·ªã m√¥ t·∫£

  @override
  void initState() {
    super.initState();
    _currentPage = widget.initialIndex;
    _pageController = PageController(initialPage: widget.initialIndex);
    likeCount = widget.like;
    isLiked = widget.isLiked; // S·ª≠ d·ª•ng gi√° tr·ªã isLiked t·ª´ constructor
    debugPrint("üîç DEBUG ChiTietBaiDang initState: isLiked=${widget.isLiked}, likeCount=$likeCount");
    
    _loadUserIdAndStatusLikePost();
  }

  Future<void> _loadUserIdAndStatusLikePost() async {
    if (widget.postId == null) return;

    final authProvider = Provider.of<AuthProvider>(context, listen: false);
    final userId = await authProvider.getuserID();
    setState(() {
      idUserID = userId ?? "";
      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ trong danh s√°ch likes kh√¥ng
      isLiked = widget.likes.contains(idUserID);
      debugPrint("üîç DEBUG ChiTietBaiDang _loadUserIdAndStatusLikePost: userId=$idUserID, isLiked=$isLiked");
    });
  }

  void _likePost(BuildContext context) {
    if (widget.postId == null) return;
    debugPrint("üîç DEBUG ChiTietBaiDang: _likePost b·∫Øt ƒë·∫ßu cho postId: ${widget.postId}");

    final postProvider = Provider.of<PostProvider>(context, listen: false);
    final oldIsLiked = isLiked;
    final oldLikeCount = likeCount;

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i local
    setState(() {
      isLiked = !isLiked;
      likeCount += isLiked ? 1 : -1;
      _hasChanges = true; // ƒê√°nh d·∫•u ƒë√£ c√≥ thay ƒë·ªïi
      
      debugPrint("üîç DEBUG ChiTietBaiDang: Tr·∫°ng th√°i like thay ƒë·ªïi t·ª´ $oldIsLiked th√†nh $isLiked");
      debugPrint("üîç DEBUG ChiTietBaiDang: S·ªë l∆∞·ª£ng like thay ƒë·ªïi t·ª´ $oldLikeCount th√†nh $likeCount");
      
      // L∆∞u tr·∫°ng th√°i thay ƒë·ªïi trong bi·∫øn _hasChanges
      _hasChanges = true;
    });

    // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i like tr√™n server
    postProvider.toggleLike(widget.postId!, context);
    debugPrint("üîç DEBUG ChiTietBaiDang: ƒê√£ g·ªçi postProvider.toggleLike");
  }

  Future<void> _navigateToComments(BuildContext context) async {
    if (widget.postId == null) return;

    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => CommentsScreen(
          postId: widget.postId!,
          postType: 0, // M·∫∑c ƒë·ªãnh postType = 0 n·∫øu kh√¥ng c√≥ th√¥ng tin
          displayName: widget.companyName,
          avatar_image: "", // C·∫ßn truy·ªÅn avatar t·ª´ m√†n h√¨nh tr∆∞·ªõc
          dateTime: widget.dateTime,
          title: widget.title ?? "", // S·ª≠ d·ª•ng title n·∫øu c√≥
          content: widget.description,
          images: widget.imageList,
          business: [], // C·∫ßn truy·ªÅn business t·ª´ m√†n h√¨nh tr∆∞·ªõc
          product: [], // C·∫ßn truy·ªÅn product t·ª´ m√†n h√¨nh tr∆∞·ªõc
          likes: widget.likes, // C·∫ßn truy·ªÅn danh s√°ch likes t·ª´ m√†n h√¨nh tr∆∞·ªõc
          commentCount: widget.comment,
          isComment: true,
          idUser: idUserID ?? "",
        ),
      ),
    );

    if (result == true) {
      // Ch·ªâ c·∫ßn c·∫≠p nh·∫≠t bi·∫øn _hasChanges ƒë·ªÉ m√†n h√¨nh tr∆∞·ªõc bi·∫øt c√≥ thay ƒë·ªïi
      setState(() {
        _hasChanges = true;
      });
    }
  }

  // H√†m ƒë·ªãnh d·∫°ng ng√†y gi·ªù ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n
  String _formatDateTime(String dateTime) {
    try {
      DateTime parsedDate = DateFormat("dd/MM/yyyy HH:mm").parse(dateTime);
      return DateFormat("HH:mm - dd/MM/yyyy").format(parsedDate);
    } catch (e) {
      debugPrint("Error parsing date: $e");
      return dateTime;
    }
  }

  // // H√†m chia s·∫ª b√†i vi·∫øt
  // void _sharePost() {
  //   if (widget.postId == null) return;
  //
  //   String shareText = "";
  //   if (widget.title != null && widget.title!.isNotEmpty) {
  //     shareText += "${widget.title}\n\n";
  //   }
  //   shareText += "${widget.description}\n\n";
  //   shareText += "ƒê∆∞·ª£c ƒëƒÉng b·ªüi: ${widget.companyName}\n";
  //   shareText += "V√†o l√∫c: ${_formatDateTime(widget.dateTime)}";
  //
  //   Share.share(shareText);
  // }

  @override
  void dispose() {
    _pageController.dispose();
    if (_hasChanges) {
      // N·∫øu c√≥ thay ƒë·ªïi, tr·∫£ v·ªÅ true khi pop m√†n h√¨nh
      Navigator.pop(context, true);
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: GestureDetector(
          onTap: () => Navigator.pop(context, _hasChanges),
          child: Container(
            margin: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.5),
              borderRadius: BorderRadius.circular(12),
            ),
            child: AppIcons.getArrowBackIos(
              color: Colors.white,
              size: 20,
            ),
          ),
        ),
        title: Column(
          children: [
            Text(
              _formatDateTime(widget.dateTime),
              style: const TextStyle(
                color: Colors.white70,
                fontSize: 14,
              ),
            ),
            const SizedBox(height: 4),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(4),
              ),
              child: Text(
                "${_currentPage + 1}/${widget.imageList.length}",
                style: const TextStyle(
                  color: Colors.blue,
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
          ],
        ),
        centerTitle: true,
      ),
      body: Column(
        children: [
          Expanded(
            child: PageView.builder(
              controller: _pageController,
              onPageChanged: (index) {
                setState(() {
                  _currentPage = index;
                });
              },
              itemCount: widget.imageList.length,
              itemBuilder: (context, index) {
                return InteractiveViewer(
                  minScale: 0.5,
                  maxScale: 4.0,
                  child: Image.network(
                    widget.imageList[index],
                    fit: BoxFit.contain,
                    loadingBuilder: (context, child, loadingProgress) {
                      if (loadingProgress == null) return child;
                      return Center(
                        child: CircularProgressIndicator(
                          value: loadingProgress.expectedTotalBytes != null
                              ? loadingProgress.cumulativeBytesLoaded /
                                  loadingProgress.expectedTotalBytes!
                              : null,
                        ),
                      );
                    },
                  ),
                );
              },
            ),
          ),
          Container(
            color: Colors.black.withOpacity(0.7),
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                if (widget.title != null && widget.title!.isNotEmpty) ...[
                  Text(
                    widget.title!,
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                ],
                GestureDetector(
                  onTap: () {
                    setState(() {
                      _showFullDescription = !_showFullDescription;
                    });
                  },
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        widget.description
                            .split('\n')
                            .join('\n ‚Ä¢ '), // Th√™m d·∫•u "‚Ä¢" tr∆∞·ªõc m·ªói d√≤ng m·ªõi
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 14,
                        ),
                        maxLines: _showFullDescription ? null : 3,
                        overflow:
                            _showFullDescription ? null : TextOverflow.ellipsis,
                      ),
                      if (!_showFullDescription &&
                          widget.description.split('\n').length > 3)
                        Padding(
                          padding: const EdgeInsets.only(top: 4.0),
                          child: Text(
                            "Xem th√™m...",
                            style: TextStyle(
                              color: Colors.blue[300],
                              fontSize: 14,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                    ],
                  ),
                ),
                const SizedBox(height: 8),
                const HorizontalDivider(),
                const SizedBox(height: 8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Row(
                      children: [
                        GestureDetector(
                          onTap: () => _likePost(context),
                          child: Row(
                            children: [
                              ImageIcon(
                                AssetImage(isLiked
                                    ? 'assets/icons/heart_on.png'
                                    : 'assets/icons/heart.png'),
                                color: isLiked ? Colors.red : Colors.white,
                                size: 24,
                              ),
                              const SizedBox(width: 8),
                              Text(
                                "$likeCount",
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontSize: 14,
                                ),
                              ),
                            ],
                          ),
                        ),
                        const SizedBox(width: 16),
                        GestureDetector(
                          onTap: widget.postId != null
                              ? () => _navigateToComments(context)
                              : null,
                          child: Row(
                            children: [
                              const ImageIcon(
                                AssetImage('assets/icons/comment.png'),
                                color: Colors.white,
                                size: 24,
                              ),
                              const SizedBox(width: 8),
                              Text(
                                "${widget.comment}",
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontSize: 14,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                    // N√∫t chia s·∫ª
                    // GestureDetector(
                    //   onTap: _sharePost,
                    //   child: Container(
                    //     padding: const EdgeInsets.all(8),
                    //     decoration: BoxDecoration(
                    //       color: Colors.blue,
                    //       borderRadius: BorderRadius.circular(8),
                    //     ),
                    //     child: Row(
                    //       children: [
                    //         const Icon(
                    //           Icons.share,
                    //           color: Colors.white,
                    //           size: 20,
                    //         ),
                    //         const SizedBox(width: 4),
                    //         const Text(
                    //           "Chia s·∫ª",
                    //           style: TextStyle(
                    //             color: Colors.white,
                    //             fontSize: 14,
                    //           ),
                    //         ),
                    //       ],
                    //     ),
                    //   ),
                    // ),
                  ],
                )
              ],
            ),
          ),
        ],
      ),
    );
  }
}
