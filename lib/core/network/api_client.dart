import 'dart:convert';
import 'dart:io';
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http_parser/http_parser.dart';
import '../../providers/send_error_log.dart';
import 'api_endpoints.dart';
import 'package:clbdoanhnhansg/widgets/alert_widget_noti.dart';

class ApiClient {
  static final String baseUrl = ApiEndpoints.baseUrl;

  void _showErrorSnackbar(BuildContext context, String message) {
    CustomAlertNoti.show(
      context,
      message,
      backgroundColor: Colors.red,
    );
  }

  Future<Map<String, dynamic>> _request(
    String method,
    String endpoint,
    BuildContext context, {
    Map<String, dynamic>? body,
    Map<String, List<File>>? files,
  }) async {
    final String url =
        endpoint.startsWith('/') ? baseUrl + endpoint : '$baseUrl/$endpoint';
    
    // S·ª≠ d·ª•ng SharedPreferences thay v√¨ FlutterSecureStorage
    final prefs = await SharedPreferences.getInstance();
    String? token = prefs.getString('auth_token');

    final headers = {
      'Accept': 'application/json',
      if (token != null) 'Authorization': token,
    };

    debugPrint("üîπ [API REQUEST] $method: $url");
    debugPrint("üîπ Headers: $headers");
    if (body != null) {
      debugPrint("üîπ Body: $body");
    }

    try {
      late http.Response response;
      final Stopwatch stopwatch = Stopwatch()..start();

      if (method == 'PUT' ||
          method == 'PATCH' && (files != null || body != null)) {
        // T·∫°o multipart request
        var request = http.MultipartRequest(method, Uri.parse(url));
        request.headers.addAll(headers);

        // Th√™m c√°c tr∆∞·ªùng d·ªØ li·ªáu
        if (body != null) {
          body.forEach((key, value) {
            if (value != null) {
              if (value is List) {
                // X·ª≠ l√Ω array nh∆∞ product
                request.fields[key] = jsonEncode(value);
              } else {
                request.fields[key] = value.toString();
              }
            }
          });
        }

        // Th√™m files
        if (files != null) {
          files.forEach((fieldName, fileList) async {
            for (var file in fileList) {
              String fileName = file.path.split('/').last;
              String mimeType = '';
              String fileExt = fileName.split('.').last.toLowerCase();

              // X√°c ƒë·ªãnh MIME type d·ª±a v√†o ph·∫ßn m·ªü r·ªông
              switch (fileExt) {
                case 'jpg':
                case 'jpeg':
                  mimeType = 'image/jpeg';
                  break;
                case 'png':
                  mimeType = 'image/png';
                  break;
                case 'gif':
                  mimeType = 'image/gif';
                  break;
                case 'webp':
                  mimeType = 'image/webp';
                  break;
                case 'bmp':
                  mimeType = 'image/bmp';
                  break;
                default:
                  String errorMsg =
                      'ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Ch·ªâ ch·∫•p nh·∫≠n jpg, jpeg, png, gif, webp, bmp';
                  sendErrorLog(
                    level: 1,
                    message: errorMsg,
                    additionalInfo: "File: $fileName, Extension: $fileExt",
                  );
                  throw Exception(errorMsg);
              }

              var stream = http.ByteStream(file.openRead());
              var length = await file.length();

              debugPrint('üì§ Uploading file: $fileName with type: $mimeType');

              var multipartFile = http.MultipartFile(
                fieldName.isEmpty || fieldName == null ? "album" : fieldName,
                stream,
                length,
                filename: fileName,
                contentType: MediaType.parse(mimeType),
              );

              request.files.add(multipartFile);
            }
          });
        }
        // G·ª≠i request v√† chuy·ªÉn ƒë·ªïi response
        try {
          final streamedResponse = await request.send();
          response = await http.Response.fromStream(streamedResponse);
        } catch (e, stack) {
          sendErrorLog(
            level: 2,
            message: "L·ªói khi g·ª≠i multipart request: $method $url",
            additionalInfo: "${e.toString()} - Stack: $stack",
          );
          rethrow;
        }
      } else {
        switch (method) {
          case 'POST':
            try {
              response = await http.post(
                Uri.parse(url),
                headers: {...headers, 'Content-Type': 'application/json'},
                body: jsonEncode(body),
              );
            } catch (e, stack) {
              sendErrorLog(
                level: 2,
                message: "L·ªói khi g·ª≠i POST request: $url",
                additionalInfo: "${e.toString()} - Stack: $stack - Body: $body",
              );
              rethrow;
            }
            break;
          case 'GET':
            try {
              final client = http.Client();
              var request = http.Request('GET', Uri.parse(url));
              request.headers.addAll(headers);
              request.followRedirects = false;
              
              final streamedResponse = await client.send(request);
              if (streamedResponse.statusCode == 301 || streamedResponse.statusCode == 302) {
                // X·ª≠ l√Ω redirect th·ªß c√¥ng
                final location = streamedResponse.headers['location'];
                if (location != null) {
                  final redirectResponse = await http.get(Uri.parse(location), headers: headers);
                  response = redirectResponse;
                } else {
                  throw Exception("Redirect URL kh√¥ng h·ª£p l·ªá");
                }
              } else {
                response = await http.Response.fromStream(streamedResponse);
              }
              client.close();
            } catch (e, stack) {
              sendErrorLog(
                level: 2,
                message: "L·ªói khi g·ª≠i GET request: $url",
                additionalInfo: "${e.toString()} - Stack: $stack",
              );
              rethrow;
            }
            break;
          case 'DELETE':
            try {
              response = await http.delete(
                Uri.parse(url),
                headers: {...headers, 'Content-Type': 'application/json'},
                body: body != null ? jsonEncode(body) : null,
              );
            } catch (e, stack) {
              sendErrorLog(
                level: 2,
                message: "L·ªói khi g·ª≠i DELETE request: $url",
                additionalInfo: "${e.toString()} - Stack: $stack - Body: $body",
              );
              rethrow;
            }
            break;
          case 'PATCH':
            try {
              response = await http.patch(
                Uri.parse(url),
                headers: {...headers, 'Content-Type': 'application/json'},
                body: body != null ? jsonEncode(body) : null,
              );
            } catch (e, stack) {
              sendErrorLog(
                level: 2,
                message: "L·ªói khi g·ª≠i PATCH request: $url",
                additionalInfo: "${e.toString()} - Stack: $stack - Body: $body",
              );
              rethrow;
            }
            break;
          default:
            String errorMsg = "Ph∆∞∆°ng th·ª©c HTTP kh√¥ng h·ª£p l·ªá: $method";
            sendErrorLog(
              level: 1,
              message: errorMsg,
              additionalInfo: "URL: $url, Method: $method",
            );
            throw Exception(errorMsg);
        }
      }

      stopwatch.stop();

      // Log c√°c request ch·∫≠m
      if (stopwatch.elapsedMilliseconds > 3000) {
        // H∆°n 3 gi√¢y
        sendErrorLog(
          level: 1,
          message: "API g·ªçi ch·∫≠m: $method $url",
          additionalInfo:
              "Th·ªùi gian: ${stopwatch.elapsedMilliseconds}ms, Status: ${response.statusCode}",
        );
      }

      debugPrint(" [API RESPONSE] Status Code: ${response.statusCode}");
      debugPrint(" Response Body: ${response.body}");

      if (response.statusCode >= 200 && response.statusCode < 300) {
        return jsonDecode(response.body);
      } else if (response.statusCode >= 400 && response.statusCode < 500) {
        // L·ªói ph√≠a client (400-499)
        sendErrorLog(
          level: 2,
          message: "L·ªói client API: $method $url",
          additionalInfo:
              "Status: ${response.statusCode}, Body: ${response.body}",
        );
        throw HttpException(response.body);
      } else if (response.statusCode >= 500) {
        // L·ªói ph√≠a server (500+)
        sendErrorLog(
          level: 3, // Nghi√™m tr·ªçng
          message: "L·ªói server API: $method $url",
          additionalInfo:
              "Status: ${response.statusCode}, Body: ${response.body}",
        );
        throw HttpException(response.body);
      } else {
        throw HttpException(response.body);
      }
    } catch (e, stackTrace) {
      debugPrint(" [API ERROR] L·ªói khi g·ªçi API: $e");

      // Ki·ªÉm tra n·∫øu l√† HttpException (l·ªói t·ª´ API)
      if (e is HttpException) {
        try {
          final errorData = e.toString();
          final Map<String, dynamic> errorMap = Map<String, dynamic>.from(
            jsonDecode(errorData.replaceAll('HttpException: ', '')),
          );
          // final String errorMessage =
          //     errorMap['message'] as String? ?? "L·ªói kh√¥ng x√°c ƒë·ªãnh";
          // _showErrorSnackbar(context, errorMessage);
        } catch (parseError) {
          _showErrorSnackbar(context, "L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß!");
        }
      } else if (e is SocketException) {
        _showErrorSnackbar(context,
            "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.\n Ki·ªÉm tra k·∫øt n·ªëi internet!");
      } else if (e is TimeoutException) {
        _showErrorSnackbar(context, "Y√™u c·∫ßu h·∫øt th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i!");
      } else {
        _showErrorSnackbar(context, "L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß!");
      }

      // Ph√¢n lo·∫°i v√† b√°o c√°o l·ªói chi ti·∫øt h∆°n
      if (e is SocketException) {
        sendErrorLog(
          level: 2,
          message: "L·ªói k·∫øt n·ªëi: $method $url",
          additionalInfo: "${e.toString()} - Stack: $stackTrace",
        );
      } else if (e is TimeoutException) {
        sendErrorLog(
          level: 2,
          message: "API timeout: $method $url",
          additionalInfo: "${e.toString()} - Stack: $stackTrace",
        );
      } else if (e is FormatException) {
        sendErrorLog(
          level: 2,
          message: "L·ªói ƒë·ªãnh d·∫°ng JSON: $method $url",
          additionalInfo: "${e.toString()} - Stack: $stackTrace",
        );
      } else {
        sendErrorLog(
          level: 1,
          message: "L·ªói API kh√¥ng x√°c ƒë·ªãnh: $method $url",
          additionalInfo: "${e.toString()} - Stack: $stackTrace",
        );
      }

      rethrow;
    }
  }

  Future<Map<String, dynamic>> postRequest(
    String endpoint,
    Map<String, dynamic> body,
    BuildContext context,
  ) =>
      _request('POST', endpoint, context, body: body);

  Future<Map<String, dynamic>> putRequest(
    String endpoint,
    BuildContext context, {
    Map<String, dynamic>? body,
    Map<String, List<File>>? files,
  }) =>
      _request('PUT', endpoint, context, body: body, files: files);

  Future<Map<String, dynamic>> getRequest(
          String endpoint, BuildContext context) =>
      _request('GET', endpoint, context);

  Future<Map<String, dynamic>> deleteRequest(
    String endpoint,
    BuildContext context, {
    Map<String, dynamic>? body,
  }) =>
      _request('DELETE', endpoint, context, body: body);

  Future<Map<String, dynamic>> patchRequest(
    String endpoint,
    BuildContext context, {
    Map<String, dynamic>? body,
    Map<String, List<File>>? files,
  }) =>
      _request('PATCH', endpoint, context, body: body, files: files);

  Future<Map<String, dynamic>> putJsonRequest(
    String endpoint,
    BuildContext context, {
    Map<String, dynamic>? body,
  }) async {
    final String url =
        endpoint.startsWith('/') ? baseUrl + endpoint : '$baseUrl/$endpoint';
    
    // S·ª≠ d·ª•ng SharedPreferences ƒë·ªÉ l·∫•y token
    final prefs = await SharedPreferences.getInstance();
    String? token = prefs.getString('auth_token');

    final headers = {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      if (token != null) 'Authorization': token,
    };

    debugPrint("üîπ [API REQUEST] PUT JSON: $url");
    debugPrint("üîπ Headers: $headers");
    if (body != null) {
      debugPrint("üîπ Body: $body");
      String jsonString = jsonEncode(body);
      debugPrint("üîπ JSON String: $jsonString");
    }

    try {
      final response = await http.put(
        Uri.parse(url),
        headers: headers,
        body: body != null ? jsonEncode(body) : null,
      );

      debugPrint(" [API RESPONSE] Status Code: ${response.statusCode}");
      debugPrint(" Response Body: ${response.body}");

      if (response.statusCode >= 200 && response.statusCode < 500) {
        return jsonDecode(response.body);
      } else {
        throw HttpException(response.body);
      }
    } catch (e) {
      debugPrint(" [API ERROR] L·ªói khi g·ªçi API: $e");
      _showErrorSnackbar(context, "L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß!");
      sendErrorLog(
        level: 1,
        message: "Doanh Nghi·ªáp L·ªói: L·ªói khi g·ªçi API: " + e.toString(),
        additionalInfo: e.toString(),
      );
      rethrow;
    }
  }

  Future<Map<String, dynamic>> pacthJsonRequest(
    String endpoint,
    BuildContext context, {
    dynamic body,
  }) async {
    final String url =
        endpoint.startsWith('/') ? baseUrl + endpoint : '$baseUrl/$endpoint';
    
    // S·ª≠ d·ª•ng SharedPreferences ƒë·ªÉ l·∫•y token
    final prefs = await SharedPreferences.getInstance();
    String? token = prefs.getString('auth_token');

    final headers = {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      if (token != null) 'Authorization': token,
    };

    debugPrint("üîπ [API REQUEST] PATCH JSON: $url");
    debugPrint("üîπ Headers: $headers");
    if (body != null) {
      debugPrint("üîπ Body: $body");
      String jsonString = jsonEncode(body);
      debugPrint("üîπ JSON String: $jsonString");
    }

    try {
      final response = await http.patch(
        Uri.parse(url),
        headers: headers,
        body: body != null ? jsonEncode(body) : null,
      );

      debugPrint(" [API RESPONSE] Status Code: ${response.statusCode}");
      debugPrint(" Response Body: ${response.body}");

      if (response.statusCode >= 200 && response.statusCode < 500) {
        return jsonDecode(response.body);
      } else {
        throw HttpException(response.body);
      }
    } catch (e) {
      debugPrint(" [API ERROR] L·ªói khi g·ªçi API: $e");
      _showErrorSnackbar(context, "L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß!");
      sendErrorLog(
        level: 1,
        message: "Doanh Nghi·ªáp L·ªói: L·ªói khi g·ªçi API: " + e.toString(),
        additionalInfo: e.toString(),
      );
      rethrow;
    }
  }
}
