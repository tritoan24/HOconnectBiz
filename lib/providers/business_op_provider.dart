import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../core/base/base_provider.dart';
import '../repository/business_op_repository.dart';
import '../screens/business_opportunity_management/widget/details_post_business.dart';
import '../widgets/loading_overlay.dart';
import 'bo_provider.dart';

class BusinessOpProvider extends BaseProvider {
  final BusinessOpRepository _businessRepo = BusinessOpRepository();

  // Bi·∫øn l∆∞u tr·ªØ postId c·∫ßn ƒëi·ªÅu h∆∞·ªõng
  String _pendingNavigationPostId = '';
  bool _shouldNavigate = false;

  // Getter ƒë·ªÉ ki·ªÉm tra c√≥ n√™n ƒëi·ªÅu h∆∞·ªõng kh√¥ng
  bool get shouldNavigate => _shouldNavigate;
  String get pendingNavigationPostId => _pendingNavigationPostId;

  // X√≥a tr·∫°ng th√°i ƒëi·ªÅu h∆∞·ªõng ƒë√£ s·ª≠ d·ª•ng
  void clearNavigation() {
    _shouldNavigate = false;
    _pendingNavigationPostId = '';
  }

  Future<void> joinBusiness(String postId, BuildContext context) async {
    setLoading(true);

    await executeApiCall(
      apiCall: () => _businessRepo.joinBusiness(
        context,
        postId,
      ),
      context: context,
      onSuccess: () {
        notifyListeners();
      },
      successMessage: "tham gia th√†nh c√¥ng!",
    );

    setLoading(false);
  }

  Future<bool> approveBusiness(
      List<String> postIds, BuildContext context, String targetPostId) async {
    LoadingOverlay.show(context);
    setLoading(true);

    // L∆∞u tham chi·∫øu ƒë·∫øn BoProvider
    final boProvider = Provider.of<BoProvider>(context, listen: false);

    // Bi·∫øn ƒë·ªÉ theo d√µi li·ªáu cu·ªôc g·ªçi API c√≥ th√†nh c√¥ng hay kh√¥ng
    bool success = false;

    await executeApiCall(
      apiCall: () => _businessRepo.approveBusiness(
        context,
        postIds,
      ),
      context: context,
      successMessage: "Duy·ªát th√†nh c√¥ng!",
      onSuccess: () {
        success = true;
      },
    );
    print(
        "üîç [approveBusiness] success: $success, targetPostId: $targetPostId");

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu n·∫øu th√†nh c√¥ng
    if (success && targetPostId.isNotEmpty) {
      try {
        // C·∫≠p nh·∫≠t d·ªØ li·ªáu
        await boProvider.fetchBoDataById(context, targetPostId);
        LoadingOverlay.hide();
        // ƒê·∫∑t tr·∫°ng th√°i c·∫ßn ƒëi·ªÅu h∆∞·ªõng
        _pendingNavigationPostId = targetPostId;
        _shouldNavigate = true;
        notifyListeners(); // Th√¥ng b√°o cho c√°c widget ƒëang l·∫Øng nghe
      } catch (e) {
        print("L·ªói khi fetch d·ªØ li·ªáu: $e");
      }
    }

    // C·∫≠p nh·∫≠t l·∫°i danh s√°ch sau khi duy·ªát th√†nh c√¥ng
    if (boProvider.selectedBo?.id != null &&
        boProvider.selectedBo!.id.isNotEmpty) {
      try {
        await boProvider.fetchBoDataById(context, boProvider.selectedBo!.id);
        LoadingOverlay.hide();
      } catch (e) {
        LoadingOverlay.hide();
        print("L·ªói khi fetch d·ªØ li·ªáu selectedBo: $e");
      }
    }

    setLoading(false);

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
    return success;
  }
}
