import 'dart:io';
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../core/services/socket_service.dart';
import '../models/apiresponse.dart';
import '../models/contact.dart';
import '../models/message_model.dart';
import '../models/auth_model.dart';
import '../repository/chat_repository.dart';
import '../screens/chat/deltails_sales_article.dart';
import 'auth_provider.dart';
import 'post_provider.dart';

class ChatProvider with ChangeNotifier {
  final ChatRepository _chatRepository = ChatRepository();
  final SocketService _socketService = SocketService();
  bool _isLoading = false;
  bool _isLoadingMore = false;
  List<Message> _messages = [];
  List<Contact> _contacts = [];
  String? _currentUserId;
  String? _currentChatReceiverId;
  int _cartItemCount = 0;
  int _currentPage = 1;
  bool _hasMoreMessages = true;
  static const int _limit = 5;

  ChatProvider();

  bool get isLoading => _isLoading;
  bool get isLoadingMore => _isLoadingMore;
  bool get hasMoreMessages => _hasMoreMessages;
  List<Message> get messages => _messages;
  List<Contact> get contacts => _contacts;
  bool get isSocketConnected => _socketService.isConnected;
  int get cartItemCount => _cartItemCount;

  /// Kh·ªüi t·∫°o socket cho m√†n h√¨nh chat
  Future<void> initializeSocket(
      BuildContext context, String idReceiverId) async {
    final authProvider = Provider.of<AuthProvider>(context, listen: false);
    _currentUserId = await authProvider.getuserID();
    _currentChatReceiverId = idReceiverId;

    if (_currentUserId != null) {
      // K·∫øt n·ªëi t·ªõi socket v·ªõi ID ng∆∞·ªùi d√πng
      _socketService.connectToChat(_currentUserId!, idReceiverId);

      // C√†i ƒë·∫∑t c√°c listener cho c·∫≠p nh·∫≠t tin nh·∫Øn th·ªùi gian th·ª±c
      _setupSocketListeners();
    }
  }

  /// Kh·ªüi t·∫°o socket cho m√†n h√¨nh danh b·∫°
  Future<void> initializeContactSocket(BuildContext context) async {
    final authProvider = Provider.of<AuthProvider>(context, listen: false);
    _currentUserId = await authProvider.getuserID();

    if (_currentUserId != null) {
      _socketService.connectToContact(_currentUserId!);
      _setupSocketListeners();
    }
  }

  /// Thi·∫øt l·∫≠p c√°c listener l·∫Øng nghe s·ª± ki·ªán socket
  void _setupSocketListeners() {
    // L·∫Øng nghe tin nh·∫Øn m·ªõi
    _socketService.on('new_message', (data) {
      print("üì• Nh·∫≠n tin nh·∫Øn m·ªõi t·ª´ socket: $data");
      _handleNotificationData(data);

      // C·∫≠p nh·∫≠t PostProvider khi c√≥ tin nh·∫Øn m·ªõi
      _updatePostProviderMessageCount();
    });

    // L·∫Øng nghe c·∫≠p nh·∫≠t danh b·∫°
    _socketService.on('contact_update', (data) {
      print("üë• C·∫≠p nh·∫≠t danh b·∫° t·ª´ socket: $data");
      _refreshContacts();
    });

    // L·∫Øng nghe th√¥ng b√°o
    _socketService.on('notification', (data) {
      print("üîî Nh·∫≠n th√¥ng b√°o t·ª´ socket: $data");
      _handleNotificationData(data);
    });

    // L·∫Øng nghe tr·∫°ng th√°i tin nh·∫Øn ƒë√£ ƒë·ªçc
    _socketService.on('message_read', (data) {
      print("üëÅÔ∏è C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·ªçc tin nh·∫Øn: $data");
      _updateMessageReadStatus(data);
    });
  }

  /// X·ª≠ l√Ω d·ªØ li·ªáu th√¥ng b√°o t·ª´ socket
  void _handleNotificationData(Map<String, dynamic> data) {
    try {
      if (data['data'] != null && data['data'] is Map<String, dynamic>) {
        var innerData = data['data'];

        // X·ª≠ l√Ω danh s√°ch tin nh·∫Øn
        if (innerData['data'] != null && innerData['data'] is List) {
          _processMessageList(innerData['data']);
        }
        // X·ª≠ l√Ω tin nh·∫Øn ƒë∆°n
        else if (innerData['data'] != null &&
            innerData['data'] is Map<String, dynamic>) {
          _processSingleMessage(innerData['data']);
        }
      }
    } catch (e) {
      print("‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu th√¥ng b√°o: $e");
    }
  }

  /// X·ª≠ l√Ω danh s√°ch tin nh·∫Øn t·ª´ socket
  void _processMessageList(List<dynamic> messageList) {
    try {
      List<Message> newMessages = [];

      for (var msgData in messageList) {
        if (msgData is Map<String, dynamic>) {
          try {
            final message = Message.fromJson(msgData);
            newMessages.add(message);
          } catch (e) {
            print("‚ùå L·ªói chuy·ªÉn ƒë·ªïi tin nh·∫Øn: $e");
          }
        }
      }

      // C·∫≠p nh·∫≠t danh s√°ch tin nh·∫Øn n·∫øu ƒëang trong m√†n h√¨nh chat
      if (_currentChatReceiverId != null) {
        // L·ªçc tin nh·∫Øn li√™n quan ƒë·∫øn cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
        final relevantMessages = newMessages.where((msg) {
          final senderId = msg.sender?.id;
          final receiverId = msg.receiver?.id;
          return (senderId == _currentUserId &&
                  receiverId == _currentChatReceiverId) ||
              (senderId == _currentChatReceiverId &&
                  receiverId == _currentUserId);
        }).toList();

        if (relevantMessages.isNotEmpty) {
          // Th√™m c√°c tin nh·∫Øn m·ªõi
          for (var msg in relevantMessages) {
            if (!_messages.any((m) => m.id == msg.id)) {
              _messages.add(msg);
            }
          }

          // S·∫Øp x·∫øp tin nh·∫Øn theo th·ªùi gian
          _messages.sort((a, b) {
            final timeCompare = a.timestamp.compareTo(b.timestamp);
            if (timeCompare != 0) return timeCompare;
            return (a.id ?? "").compareTo(b.id ?? "");
          });
          notifyListeners();
        }
      }
    } catch (e) {
      print("‚ùå L·ªói x·ª≠ l√Ω danh s√°ch tin nh·∫Øn: $e");
    }
  }

  /// X·ª≠ l√Ω m·ªôt tin nh·∫Øn ƒë∆°n l·∫ª t·ª´ socket
  void _processSingleMessage(Map<String, dynamic> messageData) {
    try {
      final message = Message.fromJson(messageData);

      // Ki·ªÉm tra n·∫øu tin nh·∫Øn thu·ªôc v·ªÅ cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
      if (_currentChatReceiverId != null) {
        final senderId = message.sender?.id;
        final receiverId = message.receiver?.id;

        if ((senderId == _currentUserId &&
                receiverId == _currentChatReceiverId) ||
            (senderId == _currentChatReceiverId &&
                receiverId == _currentUserId)) {
          // Th√™m v√†o danh s√°ch n·∫øu ch∆∞a c√≥
          if (!_messages.any((m) => m.id == message.id)) {
            // Th√™m tin nh·∫Øn m·ªõi v√†o cu·ªëi danh s√°ch
            _messages.add(message);
            notifyListeners();
          }
        }
      }
    } catch (e) {
      print("‚ùå L·ªói x·ª≠ l√Ω tin nh·∫Øn ƒë∆°n: $e");
    }
  }

  /// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·ªçc c·ªßa tin nh·∫Øn
  void _updateMessageReadStatus(Map<String, dynamic> data) {
    try {
      final String? messageId = data['messageId']?.toString();
      if (messageId != null) {
        final index = _messages.indexWhere((m) => m.id == messageId);
        if (index != -1) {
          // T·∫°o b·∫£n sao c·ªßa tin nh·∫Øn v·ªõi tr·∫°ng th√°i ƒë√£ ƒë·ªçc
          final updatedMessage = Message(
            id: _messages[index].id,
            sender: _messages[index].sender,
            receiver: _messages[index].receiver,
            content: _messages[index].content,
            album: _messages[index].album,
            read: true,
            data: _messages[index].data,
            timestamp: _messages[index].timestamp,
          );

          _messages[index] = updatedMessage;
          notifyListeners();
        }
      }
    } catch (e) {
      print("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·ªçc: $e");
    }
  }

  Future<void> sendMessageBuyNow(
      String receiverId, String productId, BuildContext context) async {
    _isLoading = true;
    notifyListeners();

    try {
      final response = await _chatRepository.sendMessageBuyNow(
          receiverId, productId, context);
      if (response.isSuccess) {
        String currentUserId;
        final authProvider = Provider.of<AuthProvider>(context, listen: false);
        currentUserId = (await authProvider.getuserID())!;
        print('id message: ${response.data['_id']}');
        //chuyeenr man
        Navigator.push(
            context,
            MaterialPageRoute(
                builder: (context) => DeltailsSalesArticle(
                      isCreate: true,
                      currentUserId: currentUserId,
                      idReceiver: receiverId,
                      idMessage: receiverId,
                      avatarImage: '',
                      displayName: '',
                    )));
      }
    } catch (e) {
      print("Error: $e");
    }

    _isLoading = false;
    notifyListeners();
  }

  /// L·∫•y danh s√°ch tin nh·∫Øn trong m·ªôt ph√≤ng chat
  Future<void> getListDetailChat(BuildContext context, String idUser, {bool loadMore = false}) async {
    if (!loadMore) {
      _currentPage = 1;
      _hasMoreMessages = true;
      _messages = [];
    }

    if (!_hasMoreMessages || _isLoadingMore) return;

    try {
      _isLoadingMore = true;
      notifyListeners();

      final response = await _chatRepository.getListDetailChat(
        context, 
        idUser,
        page: _currentPage,
        limit: _limit,
      );

      if (response.isSuccess && response.data is List) {
        final newMessages = (response.data as List)
            .map((item) => Message.fromJson(item))
            .toList();

        // Ki·ªÉm tra xem c√≥ c√≤n tin nh·∫Øn ƒë·ªÉ load kh√¥ng
        _hasMoreMessages = newMessages.length >= _limit;

        if (loadMore) {
          // Th√™m tin nh·∫Øn c≈© v√†o ƒë·∫ßu danh s√°ch
          _messages.insertAll(0, newMessages);
        } else {
          // Th√™m tin nh·∫Øn v√†o danh s√°ch
          _messages.addAll(newMessages);
          
          // S·∫Øp x·∫øp tin nh·∫Øn theo th·ªùi gian (t·ª´ c≈© ƒë·∫øn m·ªõi)
          _messages.sort((a, b) {
            // So s√°nh timestamp
            final timeCompare = a.timestamp.compareTo(b.timestamp);
            if (timeCompare != 0) return timeCompare;
            
            // N·∫øu timestamp b·∫±ng nhau, so s√°nh ID ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª± nh·∫•t qu√°n
            return (a.id ?? "").compareTo(b.id ?? "");
          });
        }

        _currentPage++;
        notifyListeners();
      }
    } catch (e) {
      print("Error fetching chat list: $e");
    } finally {
      _isLoadingMore = false;
      notifyListeners();
    }
  }

  /// Load th√™m tin nh·∫Øn c≈©
  Future<void> loadMoreMessages(BuildContext context) async {
    if (_currentChatReceiverId != null) {
      await getListDetailChat(context, _currentChatReceiverId!, loadMore: true);
    }
  }

  /// Reset tr·∫°ng th√°i ph√¢n trang
  void resetPagination() {
    _currentPage = 1;
    _hasMoreMessages = true;
    _messages = [];
  }

  /// **X√≥a danh s√°ch tin nh·∫Øn khi c·∫ßn reset**
  void clearState() {
    _messages = [];
    notifyListeners();
  }

  /// lay danh sach tin nhan
  Future<void> getContacts(BuildContext context,
      [String? userId = null]) async {
    _isLoading = true;
    notifyListeners();

    try {
      final ApiResponse response = await _chatRepository.getContacts(context);

      if (response.isSuccess) {
        _contacts = response.data is List
            ? (response.data as List)
                .map((item) => Contact.fromJson(item))
                .toList()
            : [];

        // L∆∞u total t·ª´ API response
        _cartItemCount = response.total ?? 0;
        print("S·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng: $_cartItemCount");
      }

      if (_currentUserId == null) {
        _socketService.connectToContact(_currentUserId!);
        // _setupContactSocketListeners();
      }
    } catch (e) {
      print("Error fetching contacts: $e");
    }
    _isLoading = false;
    notifyListeners();
  }

  //send message
  Future<void> sendMessage(
      String content, String idReceiver, String messageID, BuildContext context,
      {List<File>? files}) async {
    print("üîπ B·∫Øt ƒë·∫ßu g·ª≠i tin nh·∫Øn...");
    print("üì© N·ªôi dung tin nh·∫Øn: $content");
    print("üë§ Ng∆∞·ªùi nh·∫≠n ID: $idReceiver");
    print("üñº S·ªë l∆∞·ª£ng ·∫£nh ƒë√≠nh k√®m: ${files?.length ?? 0}");

    // T·∫°o ID t·∫°m th·ªùi cho tin nh·∫Øn
    final localId = 'temp_${DateTime.now().millisecondsSinceEpoch}';

    // T·∫°o tin nh·∫Øn t·∫°m th·ªùi v·ªõi tr·∫°ng th√°i "ƒëang g·ª≠i"
    final tempMessage = Message(
      id: localId,
      content: content.isNotEmpty ? content : "[H√¨nh ·∫£nh]",
      timestamp: DateTime.now(),
      sender: Author(
          id: _currentUserId ?? "",
          username: "",
          displayName: "",
          level: 0,
          registerType: "",
          avatarImage: "",
          coverImage: "",
          description: "",
          business: [],
          companyName: "",
          address: "",
          companyDescription: "",
          email: "",
          gender: "",
          status: "",
          phone: "",
          roleCode: 0,
          type: "",
          userId: ""),
      receiver: Author(
          id: idReceiver,
          username: "",
          displayName: "",
          level: 0,
          registerType: "",
          avatarImage: "",
          coverImage: "",
          description: "",
          business: [],
          companyName: "",
          address: "",
          companyDescription: "",
          email: "",
          gender: "",
          status: "",
          phone: "",
          roleCode: 0,
          type: "",
          userId: ""),
      album: [],
    );

    // ƒê·∫∑t tr·∫°ng th√°i tin nh·∫Øn l√† ƒëang g·ª≠i
    tempMessage.status = MessageStatus.sending;

    // Hi·ªÉn th·ªã tin nh·∫Øn tr√™n UI ngay l·∫≠p t·ª©c
    addOptimisticMessage(tempMessage);

    try {
      final response = await _chatRepository.sendMessage(
          Message(content: content.isNotEmpty ? content : "[H√¨nh ·∫£nh]"),
          idReceiver,
          context,
          files: files);

      if (response.isSuccess) {
        print("‚úÖ Tin nh·∫Øn ƒë√£ g·ª≠i th√†nh c√¥ng!");
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn th√†nh c√¥ng v√† ID t·ª´ server
        updateMessageStatus(localId, MessageStatus.sent,
            serverId: response.data?['_id']?.toString());
        print("üì° Ph·∫£n h·ªìi t·ª´ server: ${response.toString()}");
      } else {
        print("‚ö†Ô∏è G·ª≠i tin nh·∫Øn th·∫•t b·∫°i: ${response.message}");
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn th·∫•t b·∫°i
        updateMessageStatus(localId, MessageStatus.error,
            errorMessage: response.message ?? "Kh√¥ng g·ª≠i ƒë∆∞·ª£c tin nh·∫Øn");
      }
    } on SocketException catch (e) {
      print("‚ùå L·ªói k·∫øt n·ªëi m·∫°ng: $e");
      updateMessageStatus(localId, MessageStatus.error,
          errorMessage:
              "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng!");
    } on HttpException catch (e) {
      print("‚ùå L·ªói HTTP: $e");
      updateMessageStatus(localId, MessageStatus.error,
          errorMessage: "L·ªói ph·∫£n h·ªìi t·ª´ m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i.");
    } catch (e) {
      print("‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: $e");
      updateMessageStatus(localId, MessageStatus.error,
          errorMessage: "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }

    _isLoading = false;
    notifyListeners();
    print("üîπ K·∫øt th√∫c qu√° tr√¨nh g·ª≠i tin nh·∫Øn.");
  }

  void addTempMessage(Message message) {
    messages.add(message);
    notifyListeners();
  }

  //delete message
  /// **X√≥a tin nh·∫Øn**
  Future<void> deleteMessage(
      String messageId, String chatId, BuildContext context) async {
    _isLoading = true;
    notifyListeners();

    try {
      final ApiResponse response =
          await _chatRepository.deleteMessage(messageId, context);

      if (response.isSuccess) {
        print("‚úÖ Tin nh·∫Øn ƒë√£ x√≥a th√†nh c√¥ng!");

        // C·∫≠p nh·∫≠t danh s√°ch tin nh·∫Øn sau khi x√≥a
        _messages.removeWhere((message) => message.id.toString() == messageId);
        notifyListeners();
      } else {
        print("‚ö†Ô∏è X√≥a tin nh·∫Øn th·∫•t b·∫°i: ${response.message}");
      }
    } catch (e) {
      print("‚ùå L·ªói khi x√≥a tin nh·∫Øn: $e");
    }

    _isLoading = false;
    notifyListeners();
  }

  /// Ng·∫Øt k·∫øt n·ªëi socket cho m√†n h√¨nh chat
  void leaveChatRoom() {
    if (_currentChatReceiverId != null && _currentUserId != null) {
      _socketService.leaveChatRoom(_currentChatReceiverId!);
      _currentChatReceiverId = null;
    }
  }

  /// C·∫≠p nh·∫≠t danh s√°ch li√™n h·ªá
  Future<void> _refreshContacts() async {
    if (_currentUserId == null) return;

    try {
      final ApiResponse response = await _chatRepository.getContacts(
        GlobalKey<NavigatorState>().currentContext!,
      );

      if (response.isSuccess) {
        // X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ response
        _contacts = response.data is List
            ? (response.data as List)
                .map((item) => Contact.fromJson(item))
                .toList()
            : [];

        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng gi·ªè h√†ng
        _cartItemCount = response.total ?? 0;

        notifyListeners();
      }
    } catch (e) {
      print("‚ùå L·ªói c·∫≠p nh·∫≠t danh s√°ch li√™n h·ªá: $e");
    }
  }

  /// Ng·∫Øt k·∫øt n·ªëi socket cho m√†n h√¨nh danh b·∫°
  void leaveContactScreen() {
    if (_currentUserId != null) {
      _socketService.leaveContactChannel();
    }
  }

  /// Ng·∫Øt k·∫øt n·ªëi socket
  void disconnectContactSocket() {
    if (_currentUserId != null) {
      // Ch·ªâ ng·∫Øt k·∫øt n·ªëi kh·ªèi k√™nh danh b·∫°, kh√¥ng ng·∫Øt ho√†n to√†n
      _socketService.leaveContactChannel();
    }
  }

  /// C·∫≠p nh·∫≠t tr·∫°ng th√°i loading
  void _setLoading(bool value) {
    _isLoading = value;
    notifyListeners();
  }

  /// X√≥a d·ªØ li·ªáu v√† ng·∫Øt k·∫øt n·ªëi socket
  @override
  void dispose() {
    _socketService.disconnect();
    super.dispose();
  }

  /// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng tin nh·∫Øn m·ªõi trong PostProvider
  void _updatePostProviderMessageCount() {
    // C·∫ßn ƒë·∫£m b·∫£o context c√≥ s·∫µn, n√™n d√πng GlobalKey
    final context = GlobalKey<NavigatorState>().currentContext;
    if (context != null) {
      try {
        // T√¨m PostProvider trong context
        final postProvider = Provider.of<PostProvider>(context, listen: false);
        if (postProvider != null) {
          // TƒÉng s·ªë l∆∞·ª£ng tin nh·∫Øn m·ªõi
          postProvider.updateMessageCount();
        }
      } catch (e) {
        print("‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng tin nh·∫Øn m·ªõi: $e");
      }
    }
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn
  void updateMessageStatus(String messageId, MessageStatus status,
      {String? errorMessage, String? serverId}) {
    final index = _messages.indexWhere((m) => m.id == messageId);
    if (index != -1) {
      // T·∫°o b·∫£n sao c·ªßa tin nh·∫Øn v·ªõi tr·∫°ng th√°i ƒë√£ c·∫≠p nh·∫≠t
      final updatedMessage = Message(
        id: serverId ?? _messages[index].id,
        sender: _messages[index].sender,
        receiver: _messages[index].receiver,
        content: _messages[index].content ?? "",
        album: _messages[index].album ?? [],
        read: _messages[index].read ?? false,
        data: _messages[index].data,
        timestamp: _messages[index].timestamp,
      );

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† th√¥ng b√°o l·ªói
      updatedMessage.status = status;
      if (errorMessage != null) {
        updatedMessage.errorMessage = errorMessage;
        print(
            "‚ö†Ô∏è C·∫≠p nh·∫≠t th√¥ng b√°o l·ªói cho tin nh·∫Øn $messageId: $errorMessage");
      }

      // Thay th·∫ø tin nh·∫Øn c≈© b·∫±ng tin nh·∫Øn ƒë√£ c·∫≠p nh·∫≠t
      _messages[index] = updatedMessage;
      notifyListeners();
    } else {
      print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tin nh·∫Øn v·ªõi ID: $messageId");
    }
  }

  // Th√™m tin nh·∫Øn t·∫°m th·ªùi v√†o danh s√°ch
  void addOptimisticMessage(Message message) {
    // Th√™m tin nh·∫Øn m·ªõi v√†o cu·ªëi danh s√°ch (tin nh·∫Øn m·ªõi nh·∫•t)
    _messages.add(message);
    notifyListeners();
  }
}
